@startuml
actor System
participant "Command" as Cmd
participant "CommandLexer" as Lexer
participant "TokenisedCommand" as TokCmd
participant "CommandParser" as Parser
participant "AstNode.Command" as AST
participant "CommandExtractor" as Extractor
participant "CommandBuilder" as Builder

System -> Cmd: parse(commandString)
activate Cmd

' Lexing Phase
Cmd -> Lexer: lexCommand(commandString)
activate Lexer

note right of Lexer
  Lexer processes the string
  character by character:
  - peek() to look ahead
  - advance() to consume
  - munch() to collect patterns
end note

Lexer -> Lexer: lex()
activate Lexer

loop while not at end
    Lexer -> Lexer: scanToken()

    activate Lexer

    deactivate Lexer
end

Lexer -> Lexer: addToken(TERMINAL)
deactivate Lexer

create TokCmd
Lexer -> TokCmd: new TokenisedCommand(tokens)
Lexer --> Cmd: return TokenisedCommand
deactivate Lexer

' Parsing Phase
Cmd -> Parser: parseCommand(tokenisedCommand)
activate Parser

note right of Parser
  Parser uses recursive descent,
  calling parsing methods that
  mirror the grammar structure
end note

Parser -> Parser: parseCommand()
activate Parser

create AST
Parser -> AST: new Command(imperative, params, options)

Parser --> Parser: return AstNode.Command
deactivate Parser

Parser --> Cmd: return AstNode.Command
deactivate Parser

' Extraction Phase
Cmd -> Extractor: extract(astCommand)
activate Extractor

note right of Extractor
  Extractor uses the Visitor pattern
  to traverse the AST and build
  the final Command object
end note

create Builder
Extractor -> Builder: new CommandBuilder()

note right of Extractor
    multiple calls to
    CommandBuilder are made
    to set values while traversing
    the AST
end note

deactivate AST

Extractor -> Builder: build()
activate Builder
create "Command (result)" as Result
Builder -> Result: new Command(imperative, params, options)
Builder --> Extractor: return Command
deactivate Builder

Extractor --> Cmd: return Command
deactivate Extractor

Cmd --> System: return Command
deactivate Cmd

@enduml
