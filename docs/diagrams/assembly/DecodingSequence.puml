@startuml
actor System
participant "Caller" as Caller
participant "Decoder" as Decoder
participant "BareCommand" as BareCmd
participant "Bindings" as Bindings
participant "CommandExtractor" as Extractor
participant "Command" as Cmd

System -> Decoder: decode(bareCommand)
activate Decoder

note right of Decoder
  Resolution Phase:
  Match imperative to
  command extractor
end note

Decoder -> BareCmd: getImperative()
activate BareCmd
BareCmd --> Decoder
deactivate BareCmd

Decoder -> Bindings: resolveExactBinding(predicate)
activate Bindings

note right of Bindings
  Filter bindings using supplied predicate
end note

Bindings --> Decoder: return commandExtractor
deactivate Bindings

note right of Decoder
  Validation Phase:
  Extract and validate
  command parameters
end note

Decoder -> Extractor: extract(bareCommand)
activate Extractor

note right of Extractor
  Construct typed command
  with validated parameters
end note

create Cmd
Extractor -> Cmd
activate Cmd
Cmd --> Extractor: return command
deactivate Cmd

Extractor --> Decoder: return command
deactivate Extractor

Decoder --> System: return command
deactivate Decoder

note right of System
  Command is now ready
  for execution
end note

@enduml
