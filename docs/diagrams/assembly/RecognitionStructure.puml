@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide empty members
!define ABSTRACT_CLASS abstract class
!define INTERFACE interface
!define ABSTRACT_METHOD {abstract}

package "Lexer" {
    class CommandLexer {
        __
        + {static} lexCommand(String): TokenisedCommand
    }

    class TokenisedCommand {
    }
}

package "Parser" {
    class CommandParser {
        __
        + {static} parseCommand(TokenisedCommand): AstNode.Command
    }

    package "AST" {
        ABSTRACT_CLASS AstNode {
            + accept(AstVisitor): R
        }

        note "various AstNodes are implemented here, extending `AstNode`" as N1

        package "Visitor" {
            INTERFACE "AstVisitor<R>" as AstVisitor {
            }

            class CommandExtractor {
                + extract(Command): Command
            }
        }
    }
}

class BareCommand {
    __
    + {static} parse(String): BareCommand
}

class BareCommandBuilder {
    __
    + build(): BareCommand
}

' Relationships - Lexer
CommandLexer ..> TokenisedCommand : creates

' Relationships - Parser
CommandParser --> TokenisedCommand : uses

' Relationships - Visitor
CommandExtractor ..|> AstVisitor
AstNode ..> AstVisitor : accepts
CommandExtractor ..> BareCommandBuilder : uses

' Relationships - Interface
BareCommand ..> CommandLexer : uses
BareCommand ..> CommandParser : uses
BareCommand ..> CommandExtractor : uses
BareCommandBuilder ..> BareCommand : builds

hide empty members

@enduml
