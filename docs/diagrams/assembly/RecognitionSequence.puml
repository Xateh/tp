@startuml
actor System
participant "BareCommand" as Cmd <<class>>
participant "CommandLexer" as Lexer
participant "CommandParser" as Parser
participant "CommandExtractor" as Extractor
participant "BareCommandBuilder" as Builder

System -> Cmd: parse(commandString)
activate Cmd

' Lexing Phase
Cmd -> Lexer: lexCommand(commandString)
activate Lexer

note right of Lexer
  Lexer processes the string
  character by character:
  - peek() to look ahead
  - advance() to consume
  - munch() to collect patterns
end note

Lexer -> Lexer: lex()
activate Lexer

Lexer -> Lexer: return tokenisedCommand
deactivate Lexer

' Parsing Phase
Cmd -> Parser: parseCommand(tokenisedCommand)
activate Parser

note right of Parser
  Parser uses recursive descent,
  calling parsing methods that
  mirror the grammar structure
end note

Parser -> Parser: parseCommand()
activate Parser

Parser --> Parser: return astNodeCommand
deactivate Parser

Parser --> Cmd: return astNodeCommand
deactivate Parser

' Extraction Phase
Cmd -> Extractor: extract(astCommand)
activate Extractor

note right of Extractor
  Extractor uses the Visitor pattern
  to traverse the AST and build
  the final Command object
end note

create Builder
Extractor -> Builder: new BareCommandBuilder()

note right of Extractor
    multiple calls to
    BareCommandBuilder are made
    to set values while traversing
    the AST
end note

Extractor -> Builder: build()
activate Builder
create "BareCommand" as Result
Builder -> Result: new BareCommand(...)
Builder --> Extractor: return bareCommand
deactivate Builder

Extractor --> Cmd: return bareCommand
deactivate Extractor

Cmd --> System: return bareCommand
deactivate Cmd

@enduml
